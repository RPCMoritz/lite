<%@ include file="/WEB-INF/fragments/workspace/javascript.jspf" %>
<%@ include file="/WEB-INF/fragments/progress-message.jspf" %>
<%@ include file="/WEB-INF/fragments/tooltip.jspf" %>

<script nonce="${scriptNonce}">
    progressMessage.show('<p>Loading workspace...</p>');
</script>

<style>
    #explorationsNavigator li a {
        font-size: 11px;
    }
</style>

<script nonce="${scriptNonce}">
    var unsharedCodeBackground = '#dddddd';
    var sharedCodeBackground = '#eeeeee';

    var themesToBeLoaded = undefined;

    function applyBranding() {
        var branding = Structurizr.workspace.getBranding();
        if (branding.logo) {
            $('.brandingLogo').attr('src', branding.logo);
        }
    }

    function workspaceLoaded() {
        applyBranding();

        if (themesToBeLoaded === undefined) {
            hideUnnecessaryUIElements(Structurizr.workspace);

            try {
                if (Structurizr.workspace.getWorkspace().views.configuration.themes.length > 0) {
                    themesToBeLoaded = Structurizr.workspace.getWorkspace().views.configuration.themes.length;
                    Structurizr.workspace.getWorkspace().views.configuration.themes.forEach(function(theme) {
                        applyThemeFrom(theme);
                    });
                } else {
                    themesToBeLoaded = 0;
                }
            } catch (e) {
                console.log(e);
            }
        }

        if (themesToBeLoaded > 0) {
            setTimeout(workspaceLoaded, 100);
        } else {
            renderExploration();
        }
    }

    function applyThemeFrom(themeUrl) {
        $.get(themeUrl, undefined, function(data) {
            try {
                Structurizr.workspace.addTheme(JSON.parse(data));
                themesToBeLoaded--;
            } catch (e) {
                console.log('Could not load theme from ' + themeUrl);
                console.log(e);
                themesToBeLoaded--;
            }
        }, 'text')
            .fail(function(xhr, textStatus, errorThrown) {
                var errorMessage = 'Could not load theme from ' + themeUrl + '; error ' + xhr.status + ' (' + xhr.statusText + ')';
                console.log(errorMessage);
                alert(errorMessage);
                themesToBeLoaded--;
            });
    }

    function hideUnnecessaryUIElements(workspace) {
        if (workspace.hasContainers()) {
            $('.containerExploration').removeClass('hidden');
        }

        if (workspace.hasComponents()) {
            $('.componentExploration').removeClass('hidden');
        }

        $('#editorButton').prop('disabled', !${workspace.editable});
        $('#diagramsButton').prop('disabled', !Structurizr.workspace.hasViews());
        $('#documentationButton').prop('disabled', !Structurizr.workspace.hasDocumentation());
        $('#decisionLogButton').prop('disabled', !Structurizr.workspace.hasDecisions());
        $('#healthCheckButton').prop('disabled', !Structurizr.workspace.hasHealthChecks());

        var healthCheck = new Structurizr.HealthCheck(Structurizr.workspace);
        healthCheck.start(updateUI);
    }

    function updateUI(allhealthChecks, currentHealthCheck) {
        var healthCheckButton = $('#healthCheckButton');
        var numberOfHealthChecks = 0;
        var numberOfSuccessfulHealthChecks = 0 ;

        allhealthChecks.forEach(function(healthCheck) {
            numberOfHealthChecks++;
            if (healthCheck.status === true) {
                numberOfSuccessfulHealthChecks++;
            }
        });

        if (numberOfSuccessfulHealthChecks === numberOfHealthChecks) {
            healthCheckButton.attr('class', 'btn btn-success');
        } else if (numberOfSuccessfulHealthChecks === 0) {
            healthCheckButton.attr('class', 'btn btn-danger');
        } else {
            healthCheckButton.attr('class', 'btn btn-warning');
        }
    }

    $("#explorationType").change(function() {
        var url = $("#explorationType").val();
        if (url) {
            window.location.href = url;
        }
    });

    function showTooltipForElement(d) {
        if (d.type === undefined || d.type === 'Model') {
            return;
        }

        var additionalContent = '';

        if (d.type === "Container" || d.type === 'Component') {
            if (d.size || d.afferent !== undefined || d.efferent !== undefined || d.instability !== undefined) {
                additionalContent += '<hr />';
                additionalContent += '<ul>';
                if (d.size) {
                    additionalContent += '<li>Size: ' + d.size + ' lines</li>';
                }
                if (d.afferent !== undefined) {
                    additionalContent += '<li>Afferent couplings (Ca): ' + d.afferent + '</li>';
                }
                if (d.efferent !== undefined) {
                    additionalContent += '<li>Efferent couplings (Ce): ' + d.efferent + '</li>';
                }
                if (d.instability !== undefined) {
                    additionalContent += '<li>Instability (I): ' + d.instability.toFixed(3) + '</li>';
                }
                additionalContent += '</ul>';
            }
        }

        if (d.type === 'Code') {
            additionalContent += '<hr />';

            if (d.typeName) {
                additionalContent += d.typeName + '<br />';
            }

            additionalContent += '<ul>';
            if (d.technology) {
                additionalContent += '<li>Technology: ' + d.technology + '</li>';
            }
            if (d.category) {
                additionalContent += '<li>Category: ' + d.category + '</li>';
            }
            if (d.size) {
                additionalContent += '<li>Size: ' + d.size + ' lines</li>';
            }
            if (d.visibility) {
                additionalContent += '<li>Visibility: ' + d.visibility + '</li>';
            }
            if (d.shared) {
                additionalContent += '<li>Shared: ' + d.shared + '</li>';
            }
            additionalContent += '</ul>';
        }

        tooltip.showTooltipForElement(d.element, d.style, 0, 0, additionalContent);
    }

    function showTooltipForRelationship(d) {
        if (d.relationship !== undefined) {
            tooltip.showTooltipForRelationship(d.relationship, {}, d.style, 0, 0);
            return;
        }

        var sourceElementId = d[0].key;
        var destinationElementId = d[2].key;
        var sourceElement = Structurizr.workspace.findElement(sourceElementId);
        var relationshipSummary = '<hr />';

        var tags = [];
        sourceElement.relationships.forEach(function(relationship) {
            if (relationship.destinationId === destinationElementId) {
                relationshipSummary += (relationship.description ? relationship.description : '(unnamed relationship)') + (relationship.technology ? ' ' + Structurizr.workspace.renderMetadataForRelationship(relationship) : '') + '<br />';
                if (relationship.tags) {
                    var tagsAsArray = relationship.tags.split(",");

                    relationshipSummary += '<div class="smaller" style="margin-top: 5px">';
                    tagsAsArray.forEach(function(tag) {
                        if (tag !== undefined) {
                            tag = tag.trim();
                            if (tag.length > 0) {
                                relationshipSummary += '<span class="tag">';
                                relationshipSummary += tag;
                                relationshipSummary += '</span>';
                            }
                        }
                    });
                    relationshipSummary += '</div>';
                }
            }
        });

        var relationship = {
            name: '',
            description: '',
            sourceId: sourceElementId,
            destinationId: destinationElementId
        };
        var relationshipInView = {};
        var style = {
            stroke: '#cccccc'
        };
        tooltip.showTooltipForRelationship(relationship, relationshipInView, style, 0, 0, relationshipSummary);
    }

    function moveTooltip() {
        tooltip.reposition(d3.event.pageX, d3.event.pageY);
    }

    function hideTooltip() {
        tooltip.hide();
    }

    <c:if test="${not empty iframe}">
    $('#explorationControls').addClass('hidden');
    </c:if>

    <c:if test="${not empty sharingUrlPrefix}">
    $('#embedExplorationButton').removeClass('hidden');
    </c:if>

    function openEmbedExplorationModal() {
        var url = generateEmbedExplorationUrl();
        $('#embedExplorationUrl').html(url);
        $('#embedExplorationModal').modal();
    }
</script>

<div id="structurizrModel"></div>

<script type="text/javascript" src="${structurizrConfiguration.cdnUrl}/js/structurizr-style${structurizrConfiguration.versionSuffix}.js"></script>
<script type="text/javascript" src="${structurizrConfiguration.cdnUrl}/js/structurizr-d3${structurizrConfiguration.versionSuffix}.js"></script>
<script type="text/javascript" src="${structurizrConfiguration.cdnUrl}/js/structurizr-healthcheck${structurizrConfiguration.versionSuffix}.js"></script>

<c:if test="${not empty iframe}">
<script nonce="${scriptNonce}">
    function openCurrentExplorationInNewWindow() {
        var url = window.location.href;

        var index = url.indexOf('iframe=');
        window.open(url.substring(0, index-1));
    }

    $(document).hover(
        function() {
            $('#embeddedControls').css('opacity', '1.0');
        },
        function() {
            $('#embeddedControls').css('opacity', '0.1');
        }
    );
</script>
</c:if>